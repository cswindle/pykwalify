"""
Autogenerated Python class
"""
<%
import json

def quote_string_values(entry, value):
    if value and entry.get('type') in ['str', 'any']:
        return json.dumps(value)
    else:
        return "{0}".format(value)
%>
import copy
import utils

% for (module, object) in imports:
from ${module} import ${object}

% endfor

class ${class_name}(object):

    def __init__(self, document):
        self.__items = {}

        self._yaml_document = document
% for (name, entry) in items.iteritems():

    % if entry.get('type') == 'map':
        if document:
            ${name.replace('-', '_')} = document.get('${name}')
        else:
            ${name.replace('-', '_')} = None
        self._${name.replace('-', '_')} = ${entry['class']}(${name.replace('-', '_')})
    % elif entry.get('type') == 'seq':
      % if 'class' in entry['sequence'][0]:
        self._${name.replace('-', '_')} = []
        if document:
            for entry in document.get('${name}', []):
                self._${name.replace('-', '_')}.append(${entry['sequence'][0]['class']}(entry))
      % else:
        if document:
            ${name.replace('-', '_')} = document.get('${name}', [])
        else:
            ${name.replace('-', '_')} = None
        self._${name.replace('-', '_')} = ${name.replace('-', '_')}
      % endif
    % else:
        if document:
            ${name.replace('-', '_')} = document.get(
                '${name}',
                ${quote_string_values(entry, entry.get('default'))})
        else:
            ${name.replace('-', '_')} = ${quote_string_values(entry, entry.get('default'))}
        self._${name.replace('-', '_')} = ${name.replace('-', '_')}
    % endif
        self.__items['${name}'] = self._${name.replace('-', '_')}
% endfor

    def __iter__(self):
        return self.__items.__iter__()

    def __next__(self):
        return self.__items.__next__()

    def iteritems(self):
        return self.__items.iteritems()

    @property
    def yaml_document(self):
        if self._yaml_document:
            return self._yaml_document
        else:
            return {}
% for (name, entry) in items.iteritems():

    @property
    def ${name.replace('-', '_')}(self):
        return self._${name.replace('-', '_')}
% endfor

    def __contains__(self, key):
        return key in self.__items.keys()

    def __add__(self, other):
        combined_yaml = copy.deepcopy(self._yaml_document)
        combined_yaml = utils.merge(combined_yaml, other._yaml_document)
        return ${class_name}(combined_yaml)
